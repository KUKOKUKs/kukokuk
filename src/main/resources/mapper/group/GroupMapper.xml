<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kukokuk.domain.group.mapper.GroupMapper">

    <!--
        그룹 정보, 멤버 정보 조회 ResultMap
    -->
    <resultMap id="GroupUsersResultMap" type="GroupUsersDto">
        <!-- 그룹 기본 정보 -->
        <id property="groupNo" column="GROUP_NO"/>
        <result property="title" column="TITLE"/>
        <result property="motto" column="MOTTO"/>
        <result property="teacherNo" column="TEACHER_NO"/>
        <result property="createdDate" column="CREATED_DATE"/>
        <result property="updatedDate" column="UPDATED_DATE"/>
        <result property="memberCount" column="MEMBER_COUNT"/>

        <!-- 그룹에 속한 사용자 목록 -->
        <collection property="groupUsers" ofType="User">
            <id property="userNo" column="USER_NO"/>
            <result property="nickname" column="NICKNAME"/>
            <result property="level" column="LEVEL"/>
            <result property="profileFilename" column="PROFILE_FILENAME"/>
        </collection>
    </resultMap>

    <!--
         * 그룹 번호로 그룹 정보와 그룹에 속한 사용자 정보 목록 조회
         * @param gruopNo 그룹 번호
         * @return 그룹 정보, 그룹에 속한 사용자 정보 목록
        GruopUsersDto getGruopUsersByGruopNo(int gruopNo);
    -->
    <select id="getGruopUsersByGruopNo" resultMap="GroupUsersResultMap">
        SELECT G.GROUP_NO         AS GROUP_NO,
               G.TITLE            AS TITLE,
               G.MOTTO            AS MOTTO,
               G.USER_NO          AS TEACHER_NO,
               G.CREATED_DATE     AS CREATED_DATE,
               G.UPDATED_DATE     AS UPDATED_DATE,
               COUNT(GU.USER_NO)  AS MEMBER_COUNT,
               U.USER_NO          AS USER_NO,
               U.NICKNAME         AS NICKNAME,
               U.LEVEL            AS LEVEL,
               U.PROFILE_FILENAME AS PROFILE_FILENAME
        FROM KUKOKUK_GROUPS G
                 JOIN KUKOKUK_GROUP_USERS GU ON G.GROUP_NO = GU.GROUP_NO
                 JOIN KUKOKUK_USERS U ON GU.USER_NO = U.USER_NO AND U.IS_DELETED = 'N'
        WHERE G.GROUP_NO = #{groupNo}
          AND G.IS_DELETED = 'N'
        GROUP BY G.GROUP_NO, U.USER_NO
    </select>

    <!--
         * 그룹 정보를 전달받아 그룹 삭제
         * @param group 삭제할 그룹 정보
        void deleteGroup(Group group);
    -->
    <update id="deleteGroup" parameterType="Group">
        UPDATE KUKOKUK_GROUPS
        SET IS_DELETED = 'Y'
        WHERE GROUP_NO = #{groupNo}
          AND USER_NO = #{teacher.userNo}
    </update>

    <!--
         * 그룹 정보를 전달받아 그룹 수정
         * @param group 수정할 그룹 정보
        void updateGroup(Group group);
    -->
    <update id="updateGroup" parameterType="Group">
        UPDATE KUKOKUK_GROUPS
        SET TITLE    = #{title}
          , MOTTO    = #{motto}
          , PASSWORD = #{password}
        WHERE GROUP_NO = #{groupNo}
          AND USER_NO = #{teacher.userNo}
    </update>

    <!--
         * 그룹 정보를 전달받아 그룹 등록
         * @param teacherNo 교사 권한 사용자 번호
         * @param group 그룹 정보
        void insertGroup(@Param("teacherNo") int teacherNo
        , @Param("group") Group group);
    -->
    <insert id="insertGroup"
        useGeneratedKeys="true" keyProperty="group.groupNo">
        INSERT INTO KUKOKUK_GROUPS (USER_NO, TITLE, PASSWORD, MOTTO)
        VALUES (#{teacherNo}, #{group.title}, #{group.password}, #{group.motto})
    </insert>

    <!--
        그룹 정보 조회 ResultMap
    -->
    <resultMap id="GroupResultMap" type="Group">
        <!-- 그룹 기본 정보 -->
        <id property="groupNo" column="GROUP_NO"/>
        <result property="title" column="TITLE"/>
        <result property="motto" column="MOTTO"/>
        <result property="password" column="PASSWORD"/>
        <result property="memberCount" column="MEMBER_COUNT"/>
        <result property="isDeleted" column="IS_DELETED"/>
        <result property="createdDate" column="CREATED_DATE"/>
        <result property="updatedDate" column="UPDATED_DATE"/>
        <result property="joinDate" column="JOIN_DATE"/>

        <!-- teacher(User) 정보 -->
        <association property="teacher" javaType="User">
            <id property="userNo" column="TEACHER_USER_NO"/>
            <result property="username" column="TEACHER_USERNAME"/>
            <result property="name" column="TEACHER_NAME"/>
            <result property="nickname" column="TEACHER_NICKNAME"/>
            <result property="birthDate" column="TEACHER_BIRTH_DATE"/>
            <result property="profileFilename" column="TEACHER_PROFILE_FILENAME"/>
        </association>
    </resultMap>

    <!--
         * 그룹 번호로 그룹 정보 조회
         * @param groupNo 그룹 번호
         * @return 그룹 정보
        Group getGroupByGroupNo(int groupNo);
    -->
    <select id="getGroupByGroupNo" resultMap="GroupResultMap">
        SELECT G.GROUP_NO
             , G.TITLE
             , G.MOTTO
             , G.PASSWORD
             , (SELECT COUNT(*)
                FROM KUKOKUK_GROUP_USERS GU
                         JOIN KUKOKUK_USERS M ON GU.USER_NO = M.USER_NO
                WHERE GU.GROUP_NO = G.GROUP_NO
                  AND M.IS_DELETED = 'N') AS MEMBER_COUNT
             , G.IS_DELETED
             , G.CREATED_DATE
             , G.UPDATED_DATE
             , U.USER_NO                  AS TEACHER_USER_NO
             , U.USERNAME                 AS TEACHER_USERNAME
             , U.NAME                     AS TEACHER_NAME
             , U.NICKNAME                 AS TEACHER_NICKNAME
             , U.BIRTH_DATE               AS TEACHER_BIRTH_DATE
             , U.PROFILE_FILENAME         AS TEACHER_PROFILE_FILENAME
        FROM KUKOKUK_GROUPS G
                 JOIN KUKOKUK_USERS U ON G.USER_NO = U.USER_NO
        WHERE G.GROUP_NO = #{groupNo}
          AND G.IS_DELETED = 'N'
    </select>

    <!--
         * 사용자가 속한 그룹 정보 조회
         * @param userNo 사용자 번호
         * @return 사용자가 속한 그룹 정보
        Group getGroupByUserNo(int userNo);
    -->
    <select id="getGroupByUserNo" resultMap="GroupResultMap">
        SELECT G.GROUP_NO
             , G.TITLE
             , G.MOTTO
             , G.PASSWORD
             , IFNULL(MC.MEMBER_COUNT, 0) AS MEMBER_COUNT
             , G.IS_DELETED
             , G.CREATED_DATE
             , G.UPDATED_DATE
             , GU.CREATED_DATE            AS JOIN_DATE
        FROM KUKOKUK_GROUPS G
                 LEFT JOIN (SELECT MGU.GROUP_NO, COUNT(*) AS MEMBER_COUNT
                            FROM KUKOKUK_GROUP_USERS MGU
                                     JOIN KUKOKUK_USERS U
                                          ON MGU.USER_NO = U.USER_NO
                            WHERE U.IS_DELETED = 'N'
                            GROUP BY MGU.GROUP_NO) MC ON G.GROUP_NO = MC.GROUP_NO
                 JOIN KUKOKUK_GROUP_USERS GU ON G.GROUP_NO = GU.GROUP_NO AND GU.USER_NO = #{userNo}
        WHERE G.IS_DELETED = 'N'
    </select>

    <!--
         * 사용자 번호로 그룹 목록 정보 조회
         * @param teacherNo 사용자 번호(교사권한)
         * @return 그룹 목록 정보(최신순)
        List<Group> getTeacherGroups(int teacherNo);
    -->
    <select id="getTeacherGroups" resultMap="GroupResultMap">
        SELECT G.GROUP_NO
             , G.TITLE
             , G.MOTTO
             , G.PASSWORD
             , IFNULL(GU.MEMBER_COUNT, 0) AS MEMBER_COUNT
             , G.IS_DELETED
             , G.CREATED_DATE
             , G.UPDATED_DATE
        FROM KUKOKUK_GROUPS G
                 LEFT JOIN (SELECT GU.GROUP_NO, COUNT(*) AS MEMBER_COUNT
                            FROM KUKOKUK_GROUP_USERS GU
                                     JOIN KUKOKUK_USERS U
                                          ON GU.USER_NO = U.USER_NO
                            WHERE U.IS_DELETED = 'N'
                            GROUP BY GU.GROUP_NO) GU ON G.GROUP_NO = GU.GROUP_NO
        WHERE G.USER_NO = #{teacherNo}
          AND G.IS_DELETED = 'N'
        ORDER BY G.CREATED_DATE DESC
    </select>

    <!--
         * 조건에 맞는 그룹 목록 조회
         * @param condition 조회할 데이터의 조건 값들이 담겨 있는 Map 객체
         * @return 그룹 목록 정보
        List<Group> getGroups(Map<String, Object> condition);
    -->
    <select id="getGroups" resultMap="GroupResultMap">
        SELECT G.GROUP_NO
             , G.TITLE
             , G.MOTTO
             , G.PASSWORD
             , IFNULL(GU.MEMBER_COUNT, 0) AS MEMBER_COUNT
             , G.IS_DELETED
             , G.CREATED_DATE
             , G.UPDATED_DATE
             , U.USER_NO                  AS TEACHER_USER_NO
             , U.NICKNAME                 AS TEACHER_NICKNAME
             , U.PROFILE_FILENAME         AS TEACHER_PROFILE_FILENAME
        FROM KUKOKUK_GROUPS G
                 JOIN KUKOKUK_USERS U ON G.USER_NO = U.USER_NO
                 LEFT JOIN (SELECT GU.GROUP_NO, COUNT(*) AS MEMBER_COUNT
                            FROM KUKOKUK_GROUP_USERS GU
                                JOIN KUKOKUK_USERS U
                                    ON GU.USER_NO = U.USER_NO
                            WHERE U.IS_DELETED = 'N'
                            GROUP BY GU.GROUP_NO) GU ON G.GROUP_NO = GU.GROUP_NO
        WHERE G.IS_DELETED = 'N'
        <if test="keyword != null">
            AND (G.TITLE LIKE CONCAT('%', #{keyword}, '%')
            OR U.NICKNAME LIKE CONCAT('%', #{keyword}, '%'))
        </if>
        ORDER BY
            <if test="keyword != null">
                (G.TITLE LIKE CONCAT('%', #{keyword}, '%')) DESC,
                (U.NICKNAME LIKE CONCAT('%', #{keyword}, '%')) DESC,
            </if>
            G.TITLE,
            U.NICKNAME,
            G.CREATED_DATE DESC
        LIMIT #{rows} OFFSET #{offset}
    </select>

    <!--
         * 조회할 데이터의 총 행의 수 조회
         * @param condition 조회할 데이터의 조건 값들이 담겨 있는 Map 객체
         * @return 조회할 데이터의 총 데이터 행의 수
        int getTotalRows(Map<String, Object> condition);
    -->
    <select id="getTotalRows" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM KUKOKUK_GROUPS G
        JOIN KUKOKUK_USERS U ON G.USER_NO = U.USER_NO
        WHERE G.IS_DELETED = 'N'
        <if test="keyword != null">
            AND (G.TITLE LIKE CONCAT('%', #{keyword}, '%')
            OR U.NICKNAME LIKE CONCAT('%', #{keyword}, '%'))
        </if>
    </select>

    <!--
         * 전달 받은 조회할 행의 개수로 최초 랜더링 시 기본 그룹 리스트 조회(임의의 행 조회)
         * (성능 최적화로 최신 1000건 제한으로 1000건 내에서 랜덤으로 조회)
         * @param groupCount 조회할 행의 개수
         * @return 그룹 목록 정보
        List<Group> getRandomGroups(int groupCount);
    -->
    <select id="getRandomGroups" resultMap="GroupResultMap">
        SELECT *
        FROM (SELECT G.GROUP_NO
                   , G.TITLE
                   , G.MOTTO
                   , G.PASSWORD
                   , IFNULL(GU.MEMBER_COUNT, 0) AS MEMBER_COUNT
                   , G.IS_DELETED
                   , G.CREATED_DATE
                   , G.UPDATED_DATE
                   , U.USER_NO                  AS TEACHER_USER_NO
                   , U.NICKNAME                 AS TEACHER_NICKNAME
                   , U.PROFILE_FILENAME         AS TEACHER_PROFILE_FILENAME
              FROM KUKOKUK_GROUPS G
                       JOIN KUKOKUK_USERS U ON G.USER_NO = U.USER_NO
                       LEFT JOIN (SELECT GU.GROUP_NO, COUNT(*) AS MEMBER_COUNT
                                  FROM KUKOKUK_GROUP_USERS GU
                                           JOIN KUKOKUK_USERS U
                                                ON GU.USER_NO = U.USER_NO
                                  WHERE U.IS_DELETED = 'N'
                                  GROUP BY GU.GROUP_NO) GU ON G.GROUP_NO = GU.GROUP_NO
              WHERE G.IS_DELETED = 'N'
              ORDER BY G.CREATED_DATE DESC
              LIMIT 1000) AS recent
        ORDER BY RAND()
        LIMIT #{groupCount}
    </select>

</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kukokuk.domain.rank.mapper.RankMapper">

    <!-- 랭크 조회용 resultMap -->
    <resultMap id="RankResultMap" type="Rank">
        <id property="rankNo" column="RANK_NO"/>
        <result property="contentType" column="CONTENT_TYPE"/>
        <result property="playCount" column="PLAY_COUNT"/>
        <result property="totalScore" column="TOTAL_SCORE"/>
        <result property="rankMonth" column="RANK_MONTH"/>
        <result property="userNo" column="USER_NO"/>
        <result property="createdDate" column="CREATED_DATE"/>
        <result property="updatedDate" column="UPDATED_DATE"/>

        <result property="userRank" column="USER_RANK"/>

        <result property="nickname" column="NICKNAME"/>
        <result property="level" column="LEVEL"/>
        <result property="profileFilename" column="PROFILE_FILENAME"/>
    </resultMap>

    <!--
         * 랭킹 등록
         * @param rank 랭킹 정보
        void insertRank(Rank rank);
    -->
    <insert id="insertRank" parameterType="Rank">
        INSERT INTO KUKOKUK_RANKS( CONTENT_TYPE
                                 , PLAY_COUNT
                                 , TOTAL_SCORE
                                 , RANK_MONTH
                                 , USER_NO)
        VALUES ( #{contentType}
               , #{playCount}
               , #{totalScore}
               , #{rankMonth}
               , #{userNo})
    </insert>

    <!--
         * 기존 랭킹 업데이트 (점수, 플레이 횟수/조정된 값)
         * @param rank 업데이트할 랭킹 정보
        void updateRank(Rank rank);
    -->
    <update id="updateRank" parameterType="Rank">
        UPDATE KUKOKUK_RANKS
        SET PLAY_COUNT  = #{playCount}
          , TOTAL_SCORE = #{totalScore}
        WHERE RANK_NO = #{rankNo}
          AND USER_NO = #{userNo}
    </update>

    <!--
         * 특정 월, 컨텐츠타입의 사용자 랭크 조회
         * @param rankRequestDto contentType, rankMonth, userNo
         * @return 사용자의 랭크 정보
        Rank getContentRankByUserNo(RankRequestDto rankRequestDto);
    -->
    <select id="getContentRankByUserNo" parameterType="RankRequestDto" resultMap="RankResultMap">
        SELECT RANK_NO
             , CONTENT_TYPE
             , PLAY_COUNT
             , TOTAL_SCORE
             , RANK_MONTH
             , USER_NO
             , CREATED_DATE
             , UPDATED_DATE
        FROM KUKOKUK_RANKS
        WHERE USER_NO = #{userNo}
          AND RANK_MONTH = #{rankMonth}
          AND CONTENT_TYPE = #{contentType}
    </select>

    <!--
         * 조건에 해당하며 사용자 랭크를 포함한 목록 조회
         * <p>
         *     정확한 데이터를 가져오기 위해 RANK() 사용으로 limit 개수 보다 많을 수 있음
         *     서비스단에서 가공 필요
         * @param rankRequestDto contentType, rankMonth, userNo, limit
         * @return 랭크 목록 정보(userRank 정렬)
        List<Rank> getContentRanksIncludeUserByMonth(RankRequestDto rankRequestDto);
    -->
    <select id="getContentRanksIncludeUserByMonth" parameterType="RankRequestDto" resultMap="RankResultMap">
        <![CDATA[
        SELECT *
        FROM (SELECT R.RANK_NO
                   , R.CONTENT_TYPE
                   , R.PLAY_COUNT
                   , R.TOTAL_SCORE
                   , R.RANK_MONTH
                   , R.USER_NO
                   , R.CREATED_DATE
                   , R.UPDATED_DATE
                   , U.NICKNAME
                   , U.LEVEL
                   , U.PROFILE_FILENAME
                   -- RANK 계산 주요 기준은 TOTAL_SCORE DESC.
                   -- 동점(같은 TOTAL_SCORE) 상황에서 deterministic(결정적) 순서를 만들기 위해
                   -- 추가 정렬키(PLAY_COUNT DESC, UPDATED_DATE ASC, RANK_NO ASC)를 설정
                   , RANK() OVER (PARTITION BY R.CONTENT_TYPE, R.RANK_MONTH
                       ORDER BY R.TOTAL_SCORE DESC, R.PLAY_COUNT DESC, R.UPDATED_DATE, R.RANK_NO) AS USER_RANK
              FROM KUKOKUK_RANKS R
                       JOIN KUKOKUK_USERS U ON R.USER_NO = U.USER_NO
              WHERE R.CONTENT_TYPE = #{contentType}
                AND R.RANK_MONTH = #{rankMonth}) AS SUB
        -- 상위 limit과 (limit 밖일 때의) 사용자 행 둘 다 가져오기
        WHERE USER_RANK <= #{limit}
           OR (USER_NO = #{userNo} AND USER_RANK > #{limit})
        ORDER BY USER_RANK, RANK_NO
        ]]>
    </select>

    <!--
         * 조건에 해당하며 사용자 랭크를 포함한 그룹 랭크 목록 조회
         * @param rankRequestDto groupNo, contentType, rankMonth, userNo, limit
         * @return 그룹 랭크 목록 정보(userRank 정렬)
        List<Rank> getGroupContentRanksIncludeUserByMonth(RankRequestDto rankRequestDto);
    -->
    <select id="getGroupContentRanksIncludeUserByMonth" parameterType="RankRequestDto" resultMap="RankResultMap">
        <![CDATA[
        SELECT *
        FROM (SELECT R.RANK_NO
                   , R.CONTENT_TYPE
                   , R.PLAY_COUNT
                   , R.TOTAL_SCORE
                   , R.RANK_MONTH
                   , R.USER_NO
                   , R.CREATED_DATE
                   , R.UPDATED_DATE
                   , U.NICKNAME
                   , U.LEVEL
                   , U.PROFILE_FILENAME
                   , RANK() OVER (PARTITION BY R.CONTENT_TYPE, R.RANK_MONTH ORDER BY R.TOTAL_SCORE DESC) AS USER_RANK
              FROM KUKOKUK_RANKS R
                       JOIN KUKOKUK_USERS U ON R.USER_NO = U.USER_NO
                       JOIN KUKOKUK_GROUP_USERS GU ON U.USER_NO = GU.USER_NO
              WHERE GU.GROUP_NO = #{groupNo}
                AND R.CONTENT_TYPE = #{contentType}
                AND R.RANK_MONTH = #{rankMonth}) AS SUB
        WHERE USER_RANK <= #{limit}
           OR (USER_NO = #{userNo} AND USER_RANK > #{limit}) -- 기본 랭크 목록에 포함되어 있지 않을 수 있으므로
        ORDER BY USER_RANK
        ]]>
    </select>

    <!--&lt;!&ndash; 월별 랭킹 ResultMap (RANK_MONTH 컬럼 추가) &ndash;&gt;
    <resultMap id="RankingResultMap" type="Ranking">
        <id property="rankNo" column="RANK_NO"/>
        <result property="contentType" column="CONTENT_TYPE"/>
        <result property="playCount" column="PLAY_COUNT"/>
        <result property="totalScore" column="TOTAL_SCORE"/>
        <result property="rankMonth" column="RANK_MONTH"/>
        <result property="userNo" column="USER_NO"/>
        <result property="createdDate" column="CREATED_DATE"/>
        <result property="updatedDate" column="UPDATED_DATE"/>
        &lt;!&ndash; JOIN 결과용 추가 필드 &ndash;&gt;
        <result property="nickname" column="NICKNAME"/>
        <result property="profileFilename" column="PROFILE_FILENAME"/>
        <result property="groupNo" column="GROUP_NO"/>
        <result property="groupTitle" column="TITLE"/>
        <result property="userRank" column="USER_RANK"/>
    </resultMap>

    &lt;!&ndash; 새로운 월별 랭킹 등록 &ndash;&gt;
    <insert id="insertRanking" useGeneratedKeys="true" keyProperty="rankNo">
        INSERT INTO KUKOKUK_RANKS( CONTENT_TYPE
                                 , PLAY_COUNT
                                 , TOTAL_SCORE
                                 , RANK_MONTH
                                 , USER_NO)
        VALUES ( #{contentType}
               , #{playCount}
               , #{totalScore}
               , #{rankMonth}
               , #{userNo})
    </insert>

    &lt;!&ndash; 기존 월별 랭킹 업데이트 &ndash;&gt;
    <update id="updateRanking">
        UPDATE KUKOKUK_RANKS
        SET PLAY_COUNT  = #{playCount}
          , TOTAL_SCORE = #{totalScore}
        WHERE RANK_NO = #{rankNo}
    </update>

    &lt;!&ndash; 랭킹 번호로 조회 &ndash;&gt;
    <select id="getRankingByRankNo" resultMap="RankingResultMap">
        SELECT RANK_NO
             , CONTENT_TYPE
             , PLAY_COUNT
             , TOTAL_SCORE
             , RANK_MONTH
             , USER_NO
             , CREATED_DATE
             , UPDATED_DATE
        FROM KUKOKUK_RANKS
        WHERE RANK_NO = #{rankNo}
    </select>

    &lt;!&ndash; 사용자의 특정 컨텐츠 현재 월 랭킹 조회 &ndash;&gt;
    <select id="getRankingByUserAndContent" resultMap="RankingResultMap">
        SELECT RANK_NO
             , CONTENT_TYPE
             , PLAY_COUNT
             , TOTAL_SCORE
             , RANK_MONTH
             , USER_NO
             , CREATED_DATE
             , UPDATED_DATE
        FROM KUKOKUK_RANKS
        WHERE USER_NO = #{userNo}
          AND CONTENT_TYPE = #{contentType}
          AND RANK_MONTH = DATE_FORMAT(NOW(), '%Y-%m')
    </select>

    &lt;!&ndash; 사용자의 특정 컨텐츠 특정 월 랭킹 조회 &ndash;&gt;
    <select id="getRankingByUserContentAndMonth" resultMap="RankingResultMap">
        SELECT RANK_NO
             , CONTENT_TYPE
             , PLAY_COUNT
             , TOTAL_SCORE
             , RANK_MONTH
             , USER_NO
             , CREATED_DATE
             , UPDATED_DATE
        FROM KUKOKUK_RANKS
        WHERE USER_NO = #{userNo}
          AND CONTENT_TYPE = #{contentType}
          AND RANK_MONTH = #{rankMonth}
    </select>

    &lt;!&ndash; 전체 월별 랭킹 목록 조회 (현재 월 기준) &ndash;&gt;
    <select id="getGlobalRankings" resultMap="RankingResultMap">
        SELECT r.RANK_NO
             , r.CONTENT_TYPE
             , r.PLAY_COUNT
             , r.TOTAL_SCORE
             , r.RANK_MONTH
             , r.USER_NO
             , r.CREATED_DATE
             , r.UPDATED_DATE
             , u.NICKNAME
             , u.PROFILE_FILENAME
             , gu.GROUP_NO
             , g.TITLE
             , ROW_NUMBER() OVER (ORDER BY r.TOTAL_SCORE DESC, r.UPDATED_DATE ASC) AS USER_RANK
        FROM KUKOKUK_RANKS r
                 INNER JOIN KUKOKUK_USERS u ON r.USER_NO = u.USER_NO
                 LEFT JOIN KUKOKUK_GROUP_USERS gu ON u.USER_NO = gu.USER_NO
                 LEFT JOIN KUKOKUK_GROUPS g ON gu.GROUP_NO = g.GROUP_NO
        WHERE r.CONTENT_TYPE = #{contentType}
          AND r.RANK_MONTH = DATE_FORMAT(NOW(), '%Y-%m')
        ORDER BY r.TOTAL_SCORE DESC, r.UPDATED_DATE ASC
        LIMIT #{limit}
    </select>

    &lt;!&ndash; 전체 월별 랭킹 목록 조회 (특정 월 기준) &ndash;&gt;
    <select id="getGlobalRankingsByMonth" resultMap="RankingResultMap">
        SELECT r.RANK_NO
             , r.CONTENT_TYPE
             , r.PLAY_COUNT
             , r.TOTAL_SCORE
             , r.RANK_MONTH
             , r.USER_NO
             , r.CREATED_DATE
             , r.UPDATED_DATE
             , u.NICKNAME
             , u.PROFILE_FILENAME
             , gu.GROUP_NO
             , g.TITLE
             , ROW_NUMBER() OVER (ORDER BY r.TOTAL_SCORE DESC, r.UPDATED_DATE ASC) AS USER_RANK
        FROM KUKOKUK_RANKS r
                 INNER JOIN KUKOKUK_USERS u ON r.USER_NO = u.USER_NO
                 LEFT JOIN KUKOKUK_GROUP_USERS gu ON u.USER_NO = gu.USER_NO
                 LEFT JOIN KUKOKUK_GROUPS g ON gu.GROUP_NO = g.GROUP_NO
        WHERE r.CONTENT_TYPE = #{contentType}
          AND r.RANK_MONTH = #{rankMonth}
        ORDER BY r.TOTAL_SCORE DESC, r.UPDATED_DATE ASC
        LIMIT #{limit}
    </select>

    &lt;!&ndash; 특정 그룹 내 월별 랭킹 목록 조회 (현재 월 기준) &ndash;&gt;
    <select id="getGroupRankings" resultMap="RankingResultMap">
        SELECT r.RANK_NO
             , r.CONTENT_TYPE
             , r.PLAY_COUNT
             , r.TOTAL_SCORE
             , r.RANK_MONTH
             , r.USER_NO
             , r.CREATED_DATE
             , r.UPDATED_DATE
             , u.NICKNAME
             , u.PROFILE_FILENAME
             , gu.GROUP_NO
             , g.TITLE
             , ROW_NUMBER() OVER (ORDER BY r.TOTAL_SCORE DESC, r.UPDATED_DATE ASC) AS USER_RANK
        FROM KUKOKUK_RANKS r
                 INNER JOIN KUKOKUK_USERS u ON r.USER_NO = u.USER_NO
                 INNER JOIN KUKOKUK_GROUP_USERS gu ON u.USER_NO = gu.USER_NO
                 INNER JOIN KUKOKUK_GROUPS g ON gu.GROUP_NO = g.GROUP_NO
        WHERE r.CONTENT_TYPE = #{contentType}
          AND gu.GROUP_NO = #{groupNo}
          AND r.RANK_MONTH = DATE_FORMAT(NOW(), '%Y-%m')
        ORDER BY r.TOTAL_SCORE DESC, r.UPDATED_DATE ASC
        LIMIT #{limit}
    </select>

    &lt;!&ndash; 특정 그룹 내 월별 랭킹 목록 조회 (특정 월 기준) &ndash;&gt;
    <select id="getGroupRankingsByMonth" resultMap="RankingResultMap">
        SELECT r.RANK_NO
             , r.CONTENT_TYPE
             , r.PLAY_COUNT
             , r.TOTAL_SCORE
             , r.RANK_MONTH
             , r.USER_NO
             , r.CREATED_DATE
             , r.UPDATED_DATE
             , u.NICKNAME
             , u.PROFILE_FILENAME
             , gu.GROUP_NO
             , g.TITLE
             , ROW_NUMBER() OVER (ORDER BY r.TOTAL_SCORE DESC, r.UPDATED_DATE ASC) AS USER_RANK
        FROM KUKOKUK_RANKS r
                 INNER JOIN KUKOKUK_USERS u ON r.USER_NO = u.USER_NO
                 INNER JOIN KUKOKUK_GROUP_USERS gu ON u.USER_NO = gu.USER_NO
                 INNER JOIN KUKOKUK_GROUPS g ON gu.GROUP_NO = g.GROUP_NO
        WHERE r.CONTENT_TYPE = #{contentType}
          AND gu.GROUP_NO = #{groupNo}
          AND r.RANK_MONTH = #{rankMonth}
        ORDER BY r.TOTAL_SCORE DESC, r.UPDATED_DATE ASC
        LIMIT #{limit}
    </select>

    &lt;!&ndash; 전체 랭킹에서 사용자 순위 조회 (현재 월 기준) &ndash;&gt;
    <select id="getGlobalUserRanking" resultType="int">
        SELECT COUNT(*) + 1
        FROM KUKOKUK_RANKS r1
        WHERE r1.CONTENT_TYPE = #{contentType}
          AND r1.RANK_MONTH = DATE_FORMAT(NOW(), '%Y-%m')
          AND (r1.TOTAL_SCORE > (
            SELECT r2.TOTAL_SCORE
            FROM KUKOKUK_RANKS r2
            WHERE r2.USER_NO = #{userNo}
              AND r2.CONTENT_TYPE = #{contentType}
              AND r2.RANK_MONTH = DATE_FORMAT(NOW(), '%Y-%m')
        ) OR (
                   r1.TOTAL_SCORE = (
                       SELECT r2.TOTAL_SCORE
                       FROM KUKOKUK_RANKS r2
                       WHERE r2.USER_NO = #{userNo}
                         AND r2.CONTENT_TYPE = #{contentType}
                         AND r2.RANK_MONTH = DATE_FORMAT(NOW(), '%Y-%m')
                   ) AND r1.UPDATED_DATE &lt;(
                       SELECT r2.UPDATED_DATE
                       FROM KUKOKUK_RANKS r2
                       WHERE r2.USER_NO = #{userNo}
                         AND r2.CONTENT_TYPE = #{contentType}
                         AND r2.RANK_MONTH = DATE_FORMAT(NOW(), '%Y-%m')
                   )
                   ))
    </select>

    &lt;!&ndash; 전체 랭킹에서 사용자 순위 조회 (특정 월 기준) &ndash;&gt;
    <select id="getGlobalUserRankingByMonth" resultType="int">
        SELECT COUNT(*) + 1
        FROM KUKOKUK_RANKS r1
        WHERE r1.CONTENT_TYPE = #{contentType}
          AND r1.RANK_MONTH = #{rankMonth}
          AND (r1.TOTAL_SCORE > (
            SELECT r2.TOTAL_SCORE
            FROM KUKOKUK_RANKS r2
            WHERE r2.USER_NO = #{userNo}
              AND r2.CONTENT_TYPE = #{contentType}
              AND r2.RANK_MONTH = #{rankMonth}
        ) OR (
                   r1.TOTAL_SCORE = (
                       SELECT r2.TOTAL_SCORE
                       FROM KUKOKUK_RANKS r2
                       WHERE r2.USER_NO = #{userNo}
                         AND r2.CONTENT_TYPE = #{contentType}
                         AND r2.RANK_MONTH = #{rankMonth}
                   ) AND r1.UPDATED_DATE &lt;(
                       SELECT r2.UPDATED_DATE
                       FROM KUKOKUK_RANKS r2
                       WHERE r2.USER_NO = #{userNo}
                         AND r2.CONTENT_TYPE = #{contentType}
                         AND r2.RANK_MONTH = #{rankMonth}
                   )
                   ))
    </select>

    &lt;!&ndash; 그룹 내 랭킹에서 사용자 순위 조회 (현재 월 기준) &ndash;&gt;
    <select id="getGroupUserRanking" resultType="int">
        SELECT COUNT(*) + 1
        FROM KUKOKUK_RANKS r1
                 INNER JOIN KUKOKUK_USERS u1 ON r1.USER_NO = u1.USER_NO
                 INNER JOIN KUKOKUK_GROUP_USERS gu1 ON u1.USER_NO = gu1.USER_NO
        WHERE r1.CONTENT_TYPE = #{contentType}
          AND gu1.GROUP_NO = #{groupNo}
          AND r1.RANK_MONTH = DATE_FORMAT(NOW(), '%Y-%m')
          AND (r1.TOTAL_SCORE > (
            SELECT r2.TOTAL_SCORE
            FROM KUKOKUK_RANKS r2
            WHERE r2.USER_NO = #{userNo}
              AND r2.CONTENT_TYPE = #{contentType}
              AND r2.RANK_MONTH = DATE_FORMAT(NOW(), '%Y-%m')
        ) OR (
                   r1.TOTAL_SCORE = (
                       SELECT r2.TOTAL_SCORE
                       FROM KUKOKUK_RANKS r2
                       WHERE r2.USER_NO = #{userNo}
                         AND r2.CONTENT_TYPE = #{contentType}
                         AND r2.RANK_MONTH = DATE_FORMAT(NOW(), '%Y-%m')
                   ) AND r1.UPDATED_DATE &lt;(
                       SELECT r2.UPDATED_DATE
                       FROM KUKOKUK_RANKS r2
                       WHERE r2.USER_NO = #{userNo}
                         AND r2.CONTENT_TYPE = #{contentType}
                         AND r2.RANK_MONTH = DATE_FORMAT(NOW(), '%Y-%m')
                   )
                   ))
    </select>

    &lt;!&ndash; 그룹 내 랭킹에서 사용자 순위 조회 (특정 월 기준) &ndash;&gt;
    <select id="getGroupUserRankingByMonth" resultType="int">
        SELECT COUNT(*) + 1
        FROM KUKOKUK_RANKS r1
                 INNER JOIN KUKOKUK_USERS u1 ON r1.USER_NO = u1.USER_NO
                 INNER JOIN KUKOKUK_GROUP_USERS gu1 ON u1.USER_NO = gu1.USER_NO
        WHERE r1.CONTENT_TYPE = #{contentType}
          AND gu1.GROUP_NO = #{groupNo}
          AND r1.RANK_MONTH = #{rankMonth}
          AND (r1.TOTAL_SCORE &gt; (
            SELECT r2.TOTAL_SCORE
            FROM KUKOKUK_RANKS r2
            WHERE r2.USER_NO = #{userNo}
              AND r2.CONTENT_TYPE = #{contentType}
              AND r2.RANK_MONTH = #{rankMonth}
        ) OR (
                   r1.TOTAL_SCORE = (
                       SELECT r2.TOTAL_SCORE
                       FROM KUKOKUK_RANKS r2
                       WHERE r2.USER_NO = #{userNo}
                         AND r2.CONTENT_TYPE = #{contentType}
                         AND r2.RANK_MONTH = #{rankMonth}
                   ) AND r1.UPDATED_DATE &lt; (
                       SELECT r2.UPDATED_DATE
                       FROM KUKOKUK_RANKS r2
                       WHERE r2.USER_NO = #{userNo}
                         AND r2.CONTENT_TYPE = #{contentType}
                         AND r2.RANK_MONTH = #{rankMonth}
                   )
                   ))
    </select>

    &lt;!&ndash; 사용자의 모든 랭킹 삭제 &ndash;&gt;
    <delete id="deleteRankingsByUser">
        DELETE FROM KUKOKUK_RANKS
        WHERE USER_NO = #{userNo}
    </delete>

    &lt;!&ndash; 사용자의 월별 랭킹 히스토리 조회 &ndash;&gt;
    <select id="getUserMonthlyHistory" resultMap="RankingResultMap">
        SELECT r.RANK_NO
             , r.CONTENT_TYPE
             , r.PLAY_COUNT
             , r.TOTAL_SCORE
             , r.RANK_MONTH
             , r.USER_NO
             , r.CREATED_DATE
             , r.UPDATED_DATE
             , u.NICKNAME
             , u.PROFILE_FILENAME
             , gu.GROUP_NO
             , g.TITLE
        FROM KUKOKUK_RANKS r
                 INNER JOIN KUKOKUK_USERS u ON r.USER_NO = u.USER_NO
                 LEFT JOIN KUKOKUK_GROUP_USERS gu ON u.USER_NO = gu.USER_NO
                 LEFT JOIN KUKOKUK_GROUPS g ON gu.GROUP_NO = g.GROUP_NO
        WHERE r.USER_NO = #{userNo}
          AND r.CONTENT_TYPE = #{contentType}
        ORDER BY r.RANK_MONTH DESC, r.UPDATED_DATE DESC
        LIMIT #{limit}
    </select>-->

</mapper>
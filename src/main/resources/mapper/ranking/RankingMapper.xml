<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kukokuk.domain.ranking.mapper.RankingMapper">

    <resultMap id="RankingMap" type="Ranking">
        <id property="rankNo" column="RANK_NO"/>
        <result property="contentType" column="CONTENT_TYPE"/>
        <result property="playCount" column="PLAY_COUNT"/>
        <result property="totalScore" column="TOTAL_SCORE"/>
        <result property="userNo" column="USER_NO"/>
        <result property="nickname" column="NICKNAME"/>
        <result property="ranking" column="RANKING"/>
        <result property="profileFilename" column="PROFILE_FILENAME"/>
    </resultMap>

    <!--
        * 전체 랭킹 조회 (모든 사용자)
        * @param contentType 컨텐츠 유형 (SPEED, LEVEL, DICTATION 등)
        * @return 랭킹 리스트 (순위 포함)
        List<Ranking> getAllRankingsByContentType(@Param("contentType") String contentType);
    -->
    <select id="getAllRankingsByContentType" resultMap="RankingMap">
        SELECT
            r.RANK_NO,
            r.CONTENT_TYPE,
            r.PLAY_COUNT,
            r.TOTAL_SCORE,
            r.USER_NO,
            u.NICKNAME,
            u.PROFILE_FILENAME,
            ROW_NUMBER() OVER (ORDER BY r.TOTAL_SCORE DESC) as RANKING
        FROM KUKOKUK_RANKS r
                 JOIN KUKOKUK_USERS u ON r.USER_NO = u.USER_NO
        WHERE r.CONTENT_TYPE = #{contentType}
          AND u.IS_DELETED = 'N'
        ORDER BY r.TOTAL_SCORE DESC
    </select>

    <!--
        * 반별 랭킹 조회 (특정 그룹 내 사용자)
        * @param contentType 컨텐츠 유형
        * @param groupNo 그룹 번호
        * @return 그룹 내 랭킹 리스트
        List<Ranking> getGroupRankingsByContentType(@Param("contentType") String contentType,
                                                   @Param("groupNo") int groupNo);
    -->
    <select id="getGroupRankingsByContentType" resultMap="RankingMap">
        SELECT
            r.RANK_NO,
            r.CONTENT_TYPE,
            r.PLAY_COUNT,
            r.TOTAL_SCORE,
            r.USER_NO,
            u.NICKNAME,
            u.PROFILE_FILENAME,
            ROW_NUMBER() OVER (ORDER BY r.TOTAL_SCORE DESC) as RANKING
        FROM KUKOKUK_RANKS r
                 JOIN KUKOKUK_USERS u ON r.USER_NO = u.USER_NO
                 JOIN KUKOKUK_GROUP_USERS gu ON r.USER_NO = gu.USER_NO
        WHERE r.CONTENT_TYPE = #{contentType}
          AND gu.GROUP_NO = #{groupNo}
          AND u.IS_DELETED = 'N'
        ORDER BY r.TOTAL_SCORE DESC
    </select>

    <!--
        * 특정 사용자의 랭킹 정보 조회
        * @param userNo 사용자 번호
        * @param contentType 컨텐츠 유형
        * @return 사용자 랭킹 정보
        Ranking getUserRanking(@Param("userNo") int userNo,
                              @Param("contentType") String contentType);
    -->
    <select id="getUserRanking" resultMap="RankingMap">
        SELECT
            user_rank.RANK_NO,
            user_rank.CONTENT_TYPE,
            user_rank.PLAY_COUNT,
            user_rank.TOTAL_SCORE,
            user_rank.USER_NO,
            user_rank.NICKNAME,
            user_rank.PROFILE_FILENAME,
            user_rank.RANKING
        FROM (
                 SELECT
                     r.RANK_NO,
                     r.CONTENT_TYPE,
                     r.PLAY_COUNT,
                     r.TOTAL_SCORE,
                     r.USER_NO,
                     u.NICKNAME,
                     u.PROFILE_FILENAME,
                     ROW_NUMBER() OVER (ORDER BY r.TOTAL_SCORE DESC) as RANKING
                 FROM KUKOKUK_RANKS r
                          JOIN KUKOKUK_USERS u ON r.USER_NO = u.USER_NO
                 WHERE r.CONTENT_TYPE = #{contentType}
                   AND u.IS_DELETED = 'N'
             ) user_rank
        WHERE user_rank.USER_NO = #{userNo}
    </select>

    <!--
        * 랭킹 정보 신규 등록
        * @param ranking 랭킹 정보
        void insertRanking(Ranking ranking);
    -->
    <insert id="insertRanking" parameterType="Ranking">
        INSERT INTO KUKOKUK_RANKS (CONTENT_TYPE, PLAY_COUNT, TOTAL_SCORE, USER_NO)
        VALUES (#{contentType}, #{playCount}, #{totalScore}, #{userNo})
    </insert>

    <!--
        * 랭킹 정보 업데이트 (점수 갱신)
        * @param ranking 업데이트할 랭킹 정보
        void updateRanking(Ranking ranking);
    -->
    <update id="updateRanking" parameterType="Ranking">
        UPDATE KUKOKUK_RANKS
        SET PLAY_COUNT = #{playCount},
            TOTAL_SCORE = #{totalScore}
        WHERE USER_NO = #{userNo}
          AND CONTENT_TYPE = #{contentType}
    </update>

    <!--
        * 특정 사용자의 랭킹 존재 여부 확인
        * @param userNo 사용자 번호
        * @param contentType 컨텐츠 유형
        * @return 존재하면 1, 없으면 0
        int getRankingCountByUserAndContent(@Param("userNo") int userNo,
                                           @Param("contentType") String contentType);
    -->
    <select id="getRankingCountByUserAndContent" resultType="int">
        SELECT COUNT(*)
        FROM KUKOKUK_RANKS
        WHERE USER_NO = #{userNo}
          AND CONTENT_TYPE = #{contentType}
    </select>

    <!--
        * 랭킹 삭제 (사용자 탈퇴 시 등)
        * @param userNo 사용자 번호
        void deleteRankingByUserNo(@Param("userNo") int userNo);
    -->
    <delete id="deleteRankingByUserNo">
        DELETE FROM KUKOKUK_RANKS
        WHERE USER_NO = #{userNo}
    </delete>

</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kukokuk.domain.user.mapper.UserMapper">

    <!--
         * 전달받은 힌트 개수를 사용자 힌트 개수에서 차감하여 업데이트
         * @param hintCount 추가할 힌트 개수
         * @param userNo 사용자 번호
        void updateUserHintCountMinus(@Param("hintCount") int hintCount
            , @Param("userNo") int userNo);
    -->
    <update id="updateUserHintCountMinus">
        UPDATE
            KUKOKUK_USERS
        SET HINT_COUNT = GREATEST(0, HINT_COUNT - #{hintCount})
        WHERE USER_NO = #{userNo}
    </update>

    <!--
         * 전달받은 힌트 개수를 사용자 힌트 개수에 더하여 업데이트
         * @param hintCount 추가할 힌트 개수
         * @param userNo 사용자 번호
        void updateUserHintCountPlus(@Param("hintCount") int hintCount
            , @Param("userNo") int userNo);
    -->
    <update id="updateUserHintCountPlus">
        UPDATE
            KUKOKUK_USERS
        SET HINT_COUNT = HINT_COUNT + #{hintCount}
        WHERE USER_NO = #{userNo}
    </update>

    <!--
        * 사용자 프로필 이미지 정보 업데이트
        * @param profileFilename 프로필 이미지 파일명
        * @param userNo 사용자 번호
        void updateUserProfileImage(@Param("profileFilename") String profileFilename
            , @Param("userNo") int userNo);
    -->
    <update id="updateUserProfileImage">
        UPDATE
            KUKOKUK_USERS
        SET PROFILE_FILENAME = #{profileFilename}
        WHERE USER_NO = #{userNo}
    </update>

    <!--
        * 사용자 정보 업데이트
        * @param user 사용자 정보
        void updateUser(User user);
    -->
    <update id="updateUser" parameterType="User">
        UPDATE
            KUKOKUK_USERS
        SET
            UPDATED_DATE = CURRENT_TIMESTAMP
            <if test="password != null">
                , PASSWORD = #{password}
            </if>
            <if test="name != null">
                , NAME = #{name}
            </if>
            <if test="nickname != null">
                , NICKNAME = #{nickname}
            </if>
            <if test="birthDate != null">
                , BIRTH_DATE = #{birthDate}
            </if>
            <if test="gender != null">
                , GENDER = #{gender}
            </if>
            <if test="profileFilename != null">
                , PROFILE_FILENAME = #{profileFilename}
            </if>
            <if test="level != null">
                , LEVEL = #{level}
            </if>
            <if test="experiencePoints != null">
                , EXPERIENCE_POINTS = #{experiencePoints}
            </if>
            <if test="studyDifficulty != null">
                , STUDY_DIFFICULTY = #{studyDifficulty}
            </if>
            <if test="currentSchool != null">
                , CURRENT_SCHOOL = #{currentSchool}
            </if>
            <if test="currentGrade != null">
                , CURRENT_GRADE = #{currentGrade}
            </if>
            <if test="hintCount != null">
                , HINT_COUNT = #{hintCount}
            </if>
            <if test="isDeleted != null">
                , IS_DELETED = #{isDeleted}
            </if>
        WHERE USER_NO = #{userNo}
    </update>

    <!--
        사용자 정보, 사용자 권한 정보 조회 ResultMap
    -->
    <resultMap id="UserResultMapWithRoleNames" type="User">
        <id column="USER_NO" property="userNo"/>
        <result column="USERNAME" property="username"/>
        <result column="PASSWORD" property="password"/>
        <result column="NAME" property="name"/>
        <result column="NICKNAME" property="nickname"/>
        <result column="BIRTH_DATE" property="birthDate"/>
        <result column="GENDER" property="gender"/>
        <result column="PROFILE_FILENAME" property="profileFilename"/>
        <result column="AUTH_PROVIDER" property="authProvider"/>
        <result column="LEVEL" property="level"/>
        <result column="EXPERIENCE_POINTS" property="experiencePoints"/>
        <result column="STUDY_DIFFICULTY" property="studyDifficulty"/>
        <result column="CURRENT_SCHOOL" property="currentSchool"/>
        <result column="CURRENT_GRADE" property="currentGrade"/>
        <result column="HINT_COUNT" property="hintCount"/>
        <result column="IS_DELETED" property="isDeleted"/>
        <result column="CREATED_DATE" property="createdDate"/>
        <result column="UPDATED_DATE" property="updatedDate"/>
        <result column="NEXT_LEVEL_EXP" property="maxExp"/>
        <result column="GROUP_NO" property="groupNo"/>
        <collection column="USER_NO" property="roleNames"
            ofType="string" select="getUserRoleNamesByUserNo"/>
    </resultMap>

    <!--
        * 사용자 번호로 사용자, 사용자 권한 정보 조회
        * @param userNo 사용자 번호
        * @return 사용자, 사용자 권한 정보
        User getUserByUserNoWithRoleNames(int userNo);
    -->
    <select id="getUserByUserNoWithRoleNames" resultMap="UserResultMapWithRoleNames">
        SELECT U.USER_NO
             , U.USERNAME
             , U.NAME
             , U.NICKNAME
             , U.BIRTH_DATE
             , U.GENDER
             , U.PROFILE_FILENAME
             , U.AUTH_PROVIDER
             , U.LEVEL
             , U.EXPERIENCE_POINTS
             , U.STUDY_DIFFICULTY
             , U.CURRENT_SCHOOL
             , U.CURRENT_GRADE
             , U.HINT_COUNT
             , U.IS_DELETED
             , U.CREATED_DATE
             , U.UPDATED_DATE
             , (L.MAX_EXP + 1) AS NEXT_LEVEL_EXP
             , GU.GROUP_NO
        FROM KUKOKUK_USERS U
             JOIN KUKOKUK_LEVEL L ON U.LEVEL = L.LEVEL
             LEFT JOIN KUKOKUK_GROUP_USERS GU ON GU.USER_NO = U.USER_NO
        WHERE U.USER_NO = #{userNo}
    </select>

    <!--
        * username으로 사용자, 사용자 권한 정보 조회
        * @param username username
        * @return 사용자, 사용자 권한 정보
        User getUserByUsernameWithRoleNames(String username);
    -->
    <select id="getUserByUsernameWithRoleNames" resultMap="UserResultMapWithRoleNames">
        SELECT U.USER_NO
             , U.USERNAME
             , U.PASSWORD
             , U.NAME
             , U.NICKNAME
             , U.BIRTH_DATE
             , U.GENDER
             , U.PROFILE_FILENAME
             , U.AUTH_PROVIDER
             , U.LEVEL
             , U.EXPERIENCE_POINTS
             , U.STUDY_DIFFICULTY
             , U.CURRENT_SCHOOL
             , U.CURRENT_GRADE
             , U.HINT_COUNT
             , U.IS_DELETED
             , U.CREATED_DATE
             , U.UPDATED_DATE
             , L.MAX_EXP
             , (L.MAX_EXP + 1) AS NEXT_LEVEL_EXP
             , GU.GROUP_NO
        FROM KUKOKUK_USERS U
             JOIN KUKOKUK_LEVEL L ON U.LEVEL = L.LEVEL
             LEFT JOIN KUKOKUK_GROUP_USERS GU ON GU.USER_NO = U.USER_NO
        WHERE U.USERNAME = #{username}
    </select>

    <!--
        * 신규 사용자 등록
        * @param user 신규 사용자 정보
        void insertUser(User user);
    -->
    <insert id="insertUser" parameterType="User"
        useGeneratedKeys="true"
        keyProperty="userNo">
        INSERT INTO KUKOKUK_USERS ( USERNAME
                                  , PASSWORD
                                  , NAME
                                  , NICKNAME
                                  , BIRTH_DATE
                                  , GENDER)
        VALUES ( #{username}
               , #{password}
               , #{name}
               , #{nickname}
               , #{birthDate}
               , #{gender})
    </insert>

    <!--
        * 사용자 권한 등록
        * @param userNo 사용자 번호
        * @param roleName 권한 이름
        void insertUserRole(@Param(("userNo")) int userNo
        , @Param("roleName") String roleName);
    -->
    <insert id="insertUserRole">
        INSERT INTO KUKOKUK_USER_ROLES ( ROLE_NAME
                                       , USER_NO)
        VALUES ( #{roleName}
               , #{userNo})
    </insert>

    <!--
         * 이메일 중복 여부
         * @param usernam 이메일
         * @return 1=중복 / 0 = 중복X
        int isDuplicatedByUsername(String username);
    -->
    <select id="isDuplicatedByUsername" resultType="int">
        SELECT COUNT(1)
        FROM KUKOKUK_USERS
        WHERE USERNAME = #{username}
    </select>

    <!--
         * 닉네임 중복 여부
         * @param nickname 닉네임
         * @return 1=중복 / 0 = 중복X
        int isDuplicatedByNickname(String nickname);
    -->
    <select id="isDuplicatedByNickname" resultType="int">
        SELECT COUNT(1)
        FROM KUKOKUK_USERS
        WHERE NICKNAME = #{nickname}
    </select>

    <!--
        사용자 정보 조회 ResultMap
    -->
    <resultMap id="UserResultMap" type="User">
        <id column="USER_NO" property="userNo"/>
        <result column="USERNAME" property="username"/>
        <result column="NAME" property="name"/>
        <result column="NICKNAME" property="nickname"/>
        <result column="BIRTH_DATE" property="birthDate"/>
        <result column="GENDER" property="gender"/>
        <result column="PROFILE_FILENAME" property="profileFilename"/>
        <result column="AUTH_PROVIDER" property="authProvider"/>
        <result column="LEVEL" property="level"/>
        <result column="EXPERIENCE_POINTS" property="experiencePoints"/>
        <result column="STUDY_DIFFICULTY" property="studyDifficulty"/>
        <result column="CURRENT_SCHOOL" property="currentSchool"/>
        <result column="CURRENT_GRADE" property="currentGrade"/>
        <result column="HINT_COUNT" property="hintCount"/>
        <result column="IS_DELETED" property="isDeleted"/>
        <result column="CREATED_DATE" property="createdDate"/>
        <result column="UPDATED_DATE" property="updatedDate"/>
    </resultMap>

    <!--
        * 사용자 번호로 사용자 정보 조회
        * @param userNo 사용자 번호
        * @return 사용자 정보
        User getUserByUserNo(int userNo);
    -->
    <select id="getUserByUserNo" resultMap="UserResultMap">
        SELECT USER_NO
             , USERNAME
             , NAME
             , NICKNAME
             , BIRTH_DATE
             , GENDER
             , PROFILE_FILENAME
             , AUTH_PROVIDER
             , LEVEL
             , EXPERIENCE_POINTS
             , STUDY_DIFFICULTY
             , CURRENT_SCHOOL
             , CURRENT_GRADE
             , HINT_COUNT
             , IS_DELETED
             , CREATED_DATE
             , UPDATED_DATE
        FROM KUKOKUK_USERS
        WHERE USER_NO = #{userNo}
    </select>

    <!--
        * 사용자 번호로 사용자 권한 정보 조회
        * @param userNo 사용자 번호
        * @return 사용자 권한 목록
        List<String> getUserRoleNamesByUserNo(int userNo);
    -->
    <select id="getUserRoleNamesByUserNo" resultType="string">
        SELECT ROLE_NAME
        FROM KUKOKUK_USER_ROLES
        WHERE USER_NO = #{userNo}
    </select>

</mapper>